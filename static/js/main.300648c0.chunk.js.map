{"version":3,"sources":["components/Banner/index.js","components/MainApp/ResultDisplay.js","components/MainApp/index.js","App.js","serviceWorker.js","index.js"],"names":["StyledBanner","styled","div","StyledTitle","label","StyledCopyText","Banner","Container","FirstRect","props","background","SecondRect","ThirdRect","ResultLabel","ResetButton","button","ResultDisplay","result","this","mainResult","onClick","handleReset","React","Component","StyleMainApp","Title","InputDiv","InputTitle","InputUnit","Input","input","Submit","MainApp","handleBlankChange","e","setState","blank","target","value","handleSampleChange","sample","handleSubmit","state","instruction","type","onChange","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"u5BAGA,IAAMA,EAAeC,IAAOC,IAAV,KASZC,EAAcF,IAAOG,MAAV,KAWXC,EAAiBJ,IAAOG,MAAV,KAqBLE,MAbf,WACE,OACE,kBAACN,EAAD,KACC,kBAACG,EAAD,iCAGC,kBAACE,EAAD,qE,6wDClCN,IAAME,EAAYN,IAAOC,IAAV,KAOTM,EAAYP,IAAOC,IAAV,KAOO,SAAAO,GAAK,OAAIA,EAAMC,cAQ/BC,EAAaV,IAAOC,IAAV,KAcVU,EAAYX,IAAOC,IAAV,KAcTW,EAAcZ,IAAOG,MAAV,KAUXU,EAAcb,IAAOc,OAAV,KAgDFC,E,kDAxBd,WAAYP,GAAQ,uCACXA,G,qDAIN,IAAIQ,EAASC,KAAKT,MAAMU,YAAc,6BACtC,OACE,kBAACZ,EAAD,KACE,kBAACC,EAAD,CAAWE,WAAYQ,KAAKT,MAAMC,aAClC,kBAACC,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,KACGI,GAEFC,KAAKT,MAAMU,YACV,kBAACL,EAAD,CAAaM,QAASF,KAAKT,MAAMY,aAAjC,c,GAhBkBC,IAAMC,W,67CCjFlC,IAAMC,EAAevB,IAAOC,IAAV,KAQZK,EAAYN,IAAOC,IAAV,KAOTuB,EAAQxB,IAAOC,IAAV,KAQLwB,EAAWzB,IAAOC,IAAV,KAIRyB,EAAa1B,IAAOG,MAAV,KAOVwB,EAAY3B,IAAOG,MAAV,KAOTyB,EAAQ5B,IAAO6B,MAAV,KAWLC,EAAS9B,IAAOc,OAAV,KAqHGiB,E,kDAlGb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IAURwB,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CAACC,MAAOF,EAAEG,OAAOC,SAZd,EAenBC,mBAAqB,SAACL,GACpB,EAAKC,SAAS,CAACK,OAAQN,EAAEG,OAAOC,SAhBf,EAmBnBG,aAAe,SAACP,GAAO,IAAD,EACE,EAAKQ,MAAtBN,EADe,EACfA,MAAOI,EADQ,EACRA,OACG,IAAXA,EACEJ,GAAS,KAAOA,GAAS,IAC3B,EAAKD,SAAS,CAAChB,WAAY,kBAAmBT,WAAY,YAG1D,EAAKyB,SAAS,CACZhB,WAAY,0BACZwB,YAAa,QACbjC,WAAY,YAKZ8B,GAAU,KAAOA,GAAU,IAC7B,EAAKL,SAAS,CAAChB,WAAY,kBAAmBT,WAAY,YAEnD8B,GAAU,KAAOA,GAAU,IAClC,EAAKL,SAAS,CAAChB,WAAY,UAAWT,WAAY,YAE3C8B,GAAU,KAAOA,GAAU,IAClC,EAAKL,SAAS,CAAChB,WAAY,+BAAgCT,WAAY,YAEhE8B,GAAU,KAAOA,GAAU,IAClC,EAAKL,SAAS,CAAChB,WAAY,4BAA6BT,WAAY,YAGpE,EAAKyB,SAAS,CAAChB,WAAY,eACzBwB,YAAa,+BAAgCjC,WAAY,aAhD9C,EAqDnBW,YAAc,WACZ,EAAKc,SAAS,CAACC,MAAO,EAAGI,OAAQ,EAAGrB,WAAY,GAAIT,WAAY,aApDhE,EAAKgC,MAAQ,CACXN,MAAO,EACPI,OAAQ,EACRrB,WAAY,GACZwB,YAAa,GACbjC,WAAY,WAPG,E,qDAyDV,IAAD,EACqDQ,KAAKwB,MAA3DvB,EADC,EACDA,WAAYwB,EADX,EACWA,YAAajC,EADxB,EACwBA,WAAY0B,EADpC,EACoCA,MAAOI,EAD3C,EAC2CA,OACjD,OACE,kBAAChB,EAAD,KACE,kBAAC,EAAD,KACE,kBAACC,EAAD,sBAGA,kBAACC,EAAD,KACE,kBAACC,EAAD,0BAGA,kBAACE,EAAD,CAAOe,KAAK,SAASN,MAAOF,EAAOS,SAAU3B,KAAKe,oBAClD,kBAACL,EAAD,eAIF,kBAACF,EAAD,KACE,kBAACC,EAAD,2BAGA,kBAACE,EAAD,CAAOe,KAAK,SAASN,MAAOE,EAAQK,SAAU3B,KAAKqB,qBACnD,kBAACX,EAAD,eAIF,kBAACG,EAAD,CAAQX,QAASF,KAAKuB,cAAtB,WAIF,kBAAC,EAAD,CACEtB,WAAYA,EACZwB,YAAaA,EACbjC,WAAYA,EACZW,YAAaH,KAAKG,mB,GA5FNC,IAAMC,W,MC7DbuB,MATf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.300648c0.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledBanner = styled.div`\n  width: 100%;\n  height: 25vh;\n  background-color: #4A56E2;\n  border-radius: 0 0 30px 30px;\n  filter: drop-shadow(0px 0px 10px rgba(0,0,0,.5));\n  position: relative;\n`;\n\nconst StyledTitle = styled.label`\n  position: absolute;\n  left: 50%;\n  top: 60%;\n  transform: translate(-50%, -60%);\n  font-weight: bold;\n  font-size: 36px;\n  color: white;\n  filter: drop-shadow(0px 0px 10px rgba(0,0,0,.5));\n`;\n\nconst StyledCopyText = styled.label`\n  position: absolute;\n  left: 50px;\n  top: 20px;\n  font-size: 9px;\n  color: white;\n`;\n\nfunction Banner() {\n  return (\n    <StyledBanner>\n    \t<StyledTitle>\n    \t Glucose Meter Translator\n    \t</StyledTitle>\n      <StyledCopyText>\n        BioHues Digital Â© 2020 Pardee Lab. All rights reserved.\n      </StyledCopyText>\n    </StyledBanner>\n  );\n}\n\nexport default Banner;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  width: 70vw;\n  height: 100%;\n  position: relative;\n  margin-left: 10vw;\n`;\n\nconst FirstRect = styled.div`\n  position: absolute;\n  width: 50vw;\n  max-width: 550px;\n  height: 50vh;\n  max-height: 350px;\n  border-radius: 20px;\n  background-color: ${props => props.background};\n  top: 50px;\n  left: 50%;\n  transform: translate(-50%);\n  z-index: 2;\n  transition: background-color .5s;\n`;\n\nconst SecondRect = styled.div`\n  position: absolute;\n  width: 55vw;\n  max-width: 600px;\n  height: 45vh;\n  max-height: 300px;\n  border-radius: 20px;\n  background-color: #B3B3B3;\n  top: calc(50px + 2.5vh);\n  left: 50%;\n  transform: translate(-50%);\n  z-index: 1;\n`;\n\nconst ThirdRect = styled.div`\n  position: absolute;\n  width: 60vw;\n  max-width: 650px;\n  height: 40vh;\n  max-height: 250px;\n  border-radius: 20px;\n  background-color: #373737;\n  opacity: 20%;\n  top: calc(50px + 5vh);\n  left: 50%;\n  transform: translate(-50%);\n`;\n\nconst ResultLabel = styled.label`\n  position: absolute;\n  left: 50%;\n  top: calc(50px + 20vh);\n  transform: translate(-50%);\n  color: white;\n  font-size: 2.5vw;\n  z-index: 3;\n`;\n\nconst ResetButton = styled.button`\n  position: absolute;\n  left: 50%;\n  top: calc(50px + 32vh);\n  transform: translate(-50%);\n  width: 100px;\n  height: 50px;\n  border-radius: 15px;\n  background-color: #333333;\n  font-size: 20px;\n  color: white;\n  z-index: 3;\n  cursor: pointer;\n  outline: none;\n  border-width: 0;\n\n  transition: background-color .2s;\n\n  :hover {\n    background-color: #4A56E2;\n  }\n`;\n\nclass ResultDisplay extends React.Component {\n\tconstructor(props) {\n    super(props);\n  }\n\n  render() {\n    let result = this.props.mainResult || 'Please input your readings';\n    return (\n      <Container>\n        <FirstRect background={this.props.background}/>\n        <SecondRect />\n        <ThirdRect />\n        <ResultLabel>\n          {result}\n        </ResultLabel>\n        {this.props.mainResult &&\n          <ResetButton onClick={this.props.handleReset}>\n            Reset\n          </ResetButton>\n        }\n      </Container>\n    );\n  }\n}\n\nexport default ResultDisplay;","import React from 'react';\nimport styled from 'styled-components';\n\nimport ResultDisplay from './ResultDisplay';\n\nconst StyleMainApp = styled.div`\n  height: 75vh;\n  width: 100%;\n  position: relative;\n  display: flex;\n  flex-direction: row;\n`;\n\nconst Container = styled.div`\n  position: relative;\n  wdith: 32vw;\n  height: 100%;\n  left: 8vw;\n`;\n\nconst Title = styled.div`\n  position: relative;\n  margin-top: 50px;\n  font-size: 28px;\n  font-color: #333333;\n  font-weight: bold;\n`;\n\nconst InputDiv = styled.div`\n  margin-top: 20px;\n`;\n\nconst InputTitle = styled.label`\n  display: block;\n  color: #707070;\n  font-size: 20px;\n  font-weight: bold;\n`;\n\nconst InputUnit = styled.label`\n  display: inline-block;\n  color: #707070;\n  font-size: 20px;\n  margin-left: 15px;\n`;\n\nconst Input = styled.input`\n  width: 130px;\n  height: 35px;\n  border-radius: 10px;\n  border-width: 2px;\n  border-color: #333333;\n  margin-top: 15px;\n  font-size: 20px;\n  outline: none;\n`;\n\nconst Submit = styled.button`\n  border-width: 0;\n  background-color: #333333;\n  font-size: 25px;\n  color: white;\n  margin-top: 40px;\n  height: 45px;\n  width: 130px;\n  cursor: pointer;\n  outline: none;\n\n  transition: background-color .2s;\n\n  :hover {\n    background-color: #4A56E2;\n  }\n`;\n\nclass MainApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      blank: 0,\n      sample: 0,\n      mainResult: '',\n      instruction: '',\n      background: '#333333'\n    };\n  }\n\n  handleBlankChange = (e) => {\n    this.setState({blank: e.target.value});\n  }\n\n  handleSampleChange = (e) => {\n    this.setState({sample: e.target.value});\n  }\n\n  handleSubmit = (e) => {\n    let {blank, sample} = this.state;\n    if (sample === 0) {\n      if (blank >= 103 && blank <= 134) {\n        this.setState({mainResult: 'Negative Result', background: '#04cc9c'});\n      }\n      else {\n        this.setState({\n          mainResult: 'Internal Control Failed',\n          instruction: 'Error',\n          background: '#ff7a89'\n        });\n      }\n    }\n    else {\n      if (sample >= 103 && sample <= 134) {\n        this.setState({mainResult: 'Negative Result', background: '#04cc9c'});\n      }\n      else if (sample >= 141 && sample <= 157) {\n        this.setState({mainResult: 'Typhoid', background: '#944e9e'});\n      }\n      else if (sample >= 174 && sample <= 192) {\n        this.setState({mainResult: 'Drug Resistance (No typhoid)', background: '#944e9e'});\n      }\n      else if (sample >= 210 && sample <= 264) {\n        this.setState({mainResult: 'Typhoid & Drug resistance', background: '#944e9e'});\n      }\n      else {\n        this.setState({mainResult: 'Inconclusive',\n          instruction: 'Please read the sample again', background: '#ff7a89'});\n      }\n    }\n  }\n\n  handleReset = () => {\n    this.setState({blank: 0, sample: 0, mainResult: '', background: '#333333'});\n  }\n\n\trender() {\n    let {mainResult, instruction, background, blank, sample} = this.state;\n    return (\n      <StyleMainApp>\n        <Container>\n          <Title>\n            Glucose Level\n          </Title>\n          <InputDiv>\n            <InputTitle>\n              Reading on Blank:\n            </InputTitle>\n            <Input type='number' value={blank} onChange={this.handleBlankChange}/>\n            <InputUnit>\n              mg/dL\n            </InputUnit>\n          </InputDiv>\n          <InputDiv>\n            <InputTitle>\n              Reading on Sample:\n            </InputTitle>\n            <Input type='number' value={sample} onChange={this.handleSampleChange}/>\n            <InputUnit>\n              mg/dL\n            </InputUnit>\n          </InputDiv>\n          <Submit onClick={this.handleSubmit}>\n            Submit\n          </Submit>\n        </Container>\n        <ResultDisplay \n          mainResult={mainResult} \n          instruction={instruction} \n          background={background}\n          handleReset={this.handleReset}\n        />\n      </StyleMainApp>\n    );\n  }\n}\n\nexport default MainApp;","import React from 'react';\nimport Banner from './components/Banner';\nimport MainApp from './components/MainApp';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Banner />\n      <MainApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}