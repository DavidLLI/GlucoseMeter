{"version":3,"sources":["components/Banner/index.js","components/MainApp/index.js","App.js","serviceWorker.js","index.js"],"names":["StyledBanner","styled","div","StyledTitle","label","StyledCopyText","Banner","StyleMainApp","Container","Title","InputDiv","InputTitle","InputUnit","Input","input","Submit","button","MainApp","props","handleBlankChange","e","setState","blank","target","value","handleSampleChange","sample","state","type","onChange","this","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"s5BAGA,IAAMA,EAAeC,IAAOC,IAAV,KASZC,EAAcF,IAAOG,MAAV,KAWXC,EAAiBJ,IAAOG,MAAV,KAqBLE,MAbf,WACE,OACE,kBAACN,EAAD,KACC,kBAACG,EAAD,iCAGC,kBAACE,EAAD,qE,k5CClCN,IAAME,EAAeN,IAAOC,IAAV,KAMZM,EAAYP,IAAOC,IAAV,KAKTO,EAAQR,IAAOC,IAAV,KAQLQ,EAAWT,IAAOC,IAAV,KAIRS,EAAaV,IAAOG,MAAV,KAOVQ,EAAYX,IAAOG,MAAV,KAOTS,EAAQZ,IAAOa,MAAV,KAWLC,EAASd,IAAOe,OAAV,KAqEGC,E,kDAlDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CAACC,MAAOF,EAAEG,OAAOC,SATd,EAYnBC,mBAAqB,SAACL,GACpB,EAAKC,SAAS,CAACK,OAAQN,EAAEG,OAAOC,SAXhC,EAAKG,MAAQ,CACXL,MAAO,EACPI,OAAQ,GAJO,E,qDAiBjB,OACE,kBAACnB,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,sBAGA,kBAACC,EAAD,KACE,kBAACC,EAAD,0BAGA,kBAACE,EAAD,CAAOe,KAAK,SAASC,SAAUC,KAAKX,oBACpC,kBAACP,EAAD,eAIF,kBAACF,EAAD,KACE,kBAACC,EAAD,2BAGA,kBAACE,EAAD,CAAOe,KAAK,SAASC,SAAUC,KAAKL,qBACpC,kBAACb,EAAD,eAIF,kBAACG,EAAD,qB,GA1CYgB,IAAMC,W,MCvDbC,MATf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c9e548a8.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledBanner = styled.div`\n  width: 100%;\n  height: 25vh;\n  background-color: #4A56E2;\n  border-radius: 0 0 30px 30px;\n  filter: drop-shadow(0px 0px 10px rgba(0,0,0,.5));\n  position: relative;\n`;\n\nconst StyledTitle = styled.label`\n  position: absolute;\n  left: 50%;\n  top: 60%;\n  transform: translate(-50%, -60%);\n  font-weight: bold;\n  font-size: 36px;\n  color: white;\n  filter: drop-shadow(0px 0px 10px rgba(0,0,0,.5));\n`;\n\nconst StyledCopyText = styled.label`\n  position: absolute;\n  left: 50px;\n  top: 20px;\n  font-size: 9px;\n  color: white;\n`;\n\nfunction Banner() {\n  return (\n    <StyledBanner>\n    \t<StyledTitle>\n    \t Glucose Meter Translator\n    \t</StyledTitle>\n      <StyledCopyText>\n        BioHues Digital Â© 2020 Pardee Lab. All rights reserved.\n      </StyledCopyText>\n    </StyledBanner>\n  );\n}\n\nexport default Banner;","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyleMainApp = styled.div`\n  height: 75vh;\n  width: 100%;\n  position: relative;\n`;\n\nconst Container = styled.div`\n  position: relative;\n  left: 8vw;\n`;\n\nconst Title = styled.div`\n  position: relative;\n  margin-top: 50px;\n  font-size: 28px;\n  font-color: #333333;\n  font-weight: bold;\n`;\n\nconst InputDiv = styled.div`\n  margin-top: 20px;\n`;\n\nconst InputTitle = styled.label`\n  display: block;\n  color: #707070;\n  font-size: 20px;\n  font-weight: bold;\n`;\n\nconst InputUnit = styled.label`\n  display: inline-block;\n  color: #707070;\n  font-size: 20px;\n  margin-left: 15px;\n`;\n\nconst Input = styled.input`\n  width: 130px;\n  height: 35px;\n  border-radius: 10px;\n  border-width: 2px;\n  border-color: #333333;\n  margin-top: 15px;\n  font-size: 20px;\n  outline: none;\n`;\n\nconst Submit = styled.button`\n  border-width: 0;\n  background-color: #333333;\n  font-size: 25px;\n  color: white;\n  margin-top: 40px;\n  height: 45px;\n  width: 130px;\n  cursor: pointer;\n  outline: none;\n\n  transition: background-color .2s;\n\n  :hover {\n    background-color: #4A56E2;\n  }\n`;\n\nclass MainApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      blank: 0,\n      sample: 0\n    };\n  }\n\n  handleBlankChange = (e) => {\n    this.setState({blank: e.target.value});\n  }\n\n  handleSampleChange = (e) => {\n    this.setState({sample: e.target.value});\n  }\n\n\trender() {\n    return (\n      <StyleMainApp>\n        <Container>\n          <Title>\n            Glucose Level\n          </Title>\n          <InputDiv>\n            <InputTitle>\n              Reading on Blank:\n            </InputTitle>\n            <Input type='number' onChange={this.handleBlankChange}/>\n            <InputUnit>\n              mg/dL\n            </InputUnit>\n          </InputDiv>\n          <InputDiv>\n            <InputTitle>\n              Reading on Sample:\n            </InputTitle>\n            <Input type='number' onChange={this.handleSampleChange}/>\n            <InputUnit>\n              mg/dL\n            </InputUnit>\n          </InputDiv>\n          <Submit>\n            Submit\n          </Submit>\n        </Container>\n      </StyleMainApp>\n    );\n  }\n}\n\nexport default MainApp;","import React from 'react';\nimport Banner from './components/Banner';\nimport MainApp from './components/MainApp';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Banner />\n      <MainApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}